# ruff.toml

line-length = 120

[format]
indent-style = "space"
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = 88
skip-magic-trailing-comma = true

[lint]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
select = [
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "D",   # pydocstyle
  "DTZ", # flake8-datetimez
  "E",   # pycodestyle
  "F",   # Pyflakes
  "I",   # isort
  "N",   # pep8-naming
  "PT",  # flake8-pytest-style
  "Q",   # flake8-quotes
  "RUF", # Ruff-specific rules
  "SIM", # flake8-simplify
  "TCH", # flake8-type-checking
  "TD",  # flake8-todos
  "TID", # flake8-tidy-imports
  "UP",  # pyupgrade
  "W",   # pycodestyle
]

ignore = [
  # tab-indentation 
  "W191",
  # indentation-with-invalid-multiple
  "E111",
  # indentation-with-invalid-multiple-comment
  "E114",
  # over-indented
  "E117",
  # indent-with-spaces
  "D206",
  # triple-single-quotes
  "D300",
  # bad-quotes-inline-string
  "Q000",
  # bad-quotes-multiline-string
  "Q001",
  # bad-quotes-docstring
  "Q002",
  # avoidable-escaped-quote
  "Q003",
  # missing-trailing-comma
  "COM812",
  # prohibited-trailing-comma
  "COM819",
  # single-line-implicit-string-concatenation
  "ISC001",
  # multi-line-implicit-string-concatenation
  "ISC002",
  # numpy convention with a few additional lints
  "D107",
  "D203",
  "D212",
  "D401",
  "D402",
  "D415",
  "D416",
  # flake8-pytest-style:
  "PT011", # pytest.raises({exception}) is too broad, set the match parameter or use a more specific exception
  # flake8-simplify
  "SIM102", # Use a single `if` statement instead of nested `if` statements
  # ruff
  "RUF005", # unpack-instead-of-concatenating-to-collection-literal
  # pycodestyle
  # TODO: Remove errors below to further improve docstring linting
  # Ordered from most common to least common errors.
  "D105",
  "D100",
  "D103",
  "D102",
  "D104",
  # todo errors
  "TD002",
  "TD003",
]
